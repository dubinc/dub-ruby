# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Errors
    

      class ForbiddenError
        extend T::Sig
        include Crystalline::MetadataFields

        # A short code indicating the error code returned.
        field :code, Models::Errors::ForbiddenCode, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('code'), required: true, 'decoder': Utils.enum_from_string(Models::Errors::ForbiddenCode, false) } }
        # A human readable explanation of what went wrong.
        field :message, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('message'), required: true } }
        # A link to our documentation with more details about this error code
        field :doc_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('doc_url') } }

        sig { params(code: Models::Errors::ForbiddenCode, message: ::String, doc_url: T.nilable(::String)).void }
        def initialize(code:, message:, doc_url: nil)
          @code = code
          @message = message
          @doc_url = doc_url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @code == other.code
          return false unless @message == other.message
          return false unless @doc_url == other.doc_url
          true
        end
      end
    end
  end
end
