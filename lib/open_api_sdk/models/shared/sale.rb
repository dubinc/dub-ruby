# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class Sale
        extend T::Sig
        include Crystalline::MetadataFields

        # The amount of the sale in cents (for all two-decimal currencies). If the sale is in a zero-decimal currency, pass the full integer value (e.g. `1437` JPY). Learn more: https://d.to/currency
        field :amount, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('amount'), required: true } }
        # The payment processor via which the sale was made.
        field :payment_processor, Models::Shared::PaymentProcessor, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('paymentProcessor'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::PaymentProcessor, false) } }
        # The invoice ID of the sale. Can be used as a idempotency key â€“ only one sale event can be recorded for a given invoice ID.
        field :invoice_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('invoiceId') } }

        sig { params(amount: ::Integer, payment_processor: Models::Shared::PaymentProcessor, invoice_id: T.nilable(::String)).void }
        def initialize(amount:, payment_processor:, invoice_id: nil)
          @amount = amount
          @payment_processor = payment_processor
          @invoice_id = invoice_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @payment_processor == other.payment_processor
          return false unless @invoice_id == other.invoice_id
          true
        end
      end
    end
  end
end
