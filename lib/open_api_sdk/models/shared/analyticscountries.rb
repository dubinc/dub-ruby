# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class AnalyticsCountries
        extend T::Sig
        include Crystalline::MetadataFields

        # The 2-letter ISO 3166-1 country code of the country. Learn more: https://d.to/geo
        field :country, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country'), required: true } }

        field :region, Crystalline::Nilable.new(Models::Shared::Region), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('region'), 'decoder': Utils.enum_from_string(Models::Shared::Region, true) } }

        field :city, Crystalline::Nilable.new(Models::Shared::City), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('city'), 'decoder': Utils.enum_from_string(Models::Shared::City, true) } }
        # The number of clicks from this country
        field :clicks, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('clicks') } }
        # The number of leads from this country
        field :leads, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('leads') } }
        # The number of sales from this country
        field :sales, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sales') } }
        # The total amount of sales from this country, in cents
        field :sale_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('saleAmount') } }

        sig { params(country: ::String, region: T.nilable(Models::Shared::Region), city: T.nilable(Models::Shared::City), clicks: T.nilable(::Float), leads: T.nilable(::Float), sales: T.nilable(::Float), sale_amount: T.nilable(::Float)).void }
        def initialize(country:, region: Models::Shared::Region::WILDCARD_, city: Models::Shared::City::WILDCARD_, clicks: 0.0, leads: 0.0, sales: 0.0, sale_amount: 0.0)
          @country = country
          @region = region
          @city = city
          @clicks = clicks
          @leads = leads
          @sales = sales
          @sale_amount = sale_amount
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @country == other.country
          return false unless @region == other.region
          return false unless @city == other.city
          return false unless @clicks == other.clicks
          return false unless @leads == other.leads
          return false unless @sales == other.sales
          return false unless @sale_amount == other.sale_amount
          true
        end
      end
    end
  end
end
