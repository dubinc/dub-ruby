# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class SaleEvent
        extend T::Sig
        include Crystalline::MetadataFields


        field :event, Models::Shared::SaleEventEvent, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('event'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::SaleEventEvent, false) } }

        field :timestamp, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('timestamp'), required: true } }

        field :event_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('eventId'), required: true } }

        field :event_name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('eventName'), required: true } }

        field :sale, Models::Shared::Sale, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sale'), required: true } }

        field :link, Models::Shared::SaleEventLink, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('link'), required: true } }

        field :click, Models::Shared::SaleEventClick, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('click'), required: true } }

        field :customer, Models::Shared::SaleEventCustomer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer'), required: true } }
        # Deprecated: Use `sale.amount` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :sale_amount, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('saleAmount'), required: true } }
        # Deprecated: Use `sale.invoiceId` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :invoice_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('invoice_id'), required: true } }
        # Deprecated: Use `sale.paymentProcessor` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :payment_processor, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('payment_processor'), required: true } }
        # Deprecated: Use `click.id` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :click_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('click_id'), required: true } }
        # Deprecated: Use `link.id` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :link_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('link_id'), required: true } }
        # Deprecated: Use `link.domain` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :domain, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('domain'), required: true } }
        # Deprecated: Use `link.key` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :key, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key'), required: true } }
        # Deprecated: Use `click.url` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :url, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('url'), required: true } }
        # Deprecated: Use `click.continent` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :continent, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('continent'), required: true } }
        # Deprecated: Use `click.country` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :country, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country'), required: true } }
        # Deprecated: Use `click.city` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :city, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('city'), required: true } }
        # Deprecated: Use `click.device` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :device, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('device'), required: true } }
        # Deprecated: Use `click.browser` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :browser, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('browser'), required: true } }
        # Deprecated: Use `click.os` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :os, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('os'), required: true } }
        # Deprecated: Use `click.qr` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :qr, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('qr'), required: true } }
        # Deprecated: Use `click.ip` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :ip, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ip'), required: true } }

        field :metadata, Crystalline::Nilable.new(::Object), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('metadata') } }

        sig { params(event: Models::Shared::SaleEventEvent, timestamp: ::String, event_id: ::String, event_name: ::String, sale: Models::Shared::Sale, link: Models::Shared::SaleEventLink, click: Models::Shared::SaleEventClick, customer: Models::Shared::SaleEventCustomer, sale_amount: ::Float, invoice_id: ::String, payment_processor: ::String, click_id: ::String, link_id: ::String, domain: ::String, key: ::String, url: ::String, continent: ::String, country: ::String, city: ::String, device: ::String, browser: ::String, os: ::String, qr: ::Float, ip: ::String, metadata: T.nilable(::Object)).void }
        def initialize(event:, timestamp:, event_id:, event_name:, sale:, link:, click:, customer:, sale_amount:, invoice_id:, payment_processor:, click_id:, link_id:, domain:, key:, url:, continent:, country:, city:, device:, browser:, os:, qr:, ip:, metadata: nil)
          @event = event
          @timestamp = timestamp
          @event_id = event_id
          @event_name = event_name
          @sale = sale
          @link = link
          @click = click
          @customer = customer
          @sale_amount = sale_amount
          @invoice_id = invoice_id
          @payment_processor = payment_processor
          @click_id = click_id
          @link_id = link_id
          @domain = domain
          @key = key
          @url = url
          @continent = continent
          @country = country
          @city = city
          @device = device
          @browser = browser
          @os = os
          @qr = qr
          @ip = ip
          @metadata = metadata
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @event == other.event
          return false unless @timestamp == other.timestamp
          return false unless @event_id == other.event_id
          return false unless @event_name == other.event_name
          return false unless @sale == other.sale
          return false unless @link == other.link
          return false unless @click == other.click
          return false unless @customer == other.customer
          return false unless @sale_amount == other.sale_amount
          return false unless @invoice_id == other.invoice_id
          return false unless @payment_processor == other.payment_processor
          return false unless @click_id == other.click_id
          return false unless @link_id == other.link_id
          return false unless @domain == other.domain
          return false unless @key == other.key
          return false unless @url == other.url
          return false unless @continent == other.continent
          return false unless @country == other.country
          return false unless @city == other.city
          return false unless @device == other.device
          return false unless @browser == other.browser
          return false unless @os == other.os
          return false unless @qr == other.qr
          return false unless @ip == other.ip
          return false unless @metadata == other.metadata
          true
        end
      end
    end
  end
end
