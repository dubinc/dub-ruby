# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    
      # Triggered when a commission is created for a partner.
      class CommissionCreatedEvent
        extend T::Sig
        include Crystalline::MetadataFields


        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id'), required: true } }

        field :event, Models::Shared::CommissionCreatedEventEvent, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('event'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::CommissionCreatedEventEvent, false) } }

        field :created_at, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('createdAt'), required: true } }

        field :data, Models::Shared::CommissionCreatedEventData, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('data'), required: true } }

        sig { params(id: ::String, event: Models::Shared::CommissionCreatedEventEvent, created_at: ::String, data: Models::Shared::CommissionCreatedEventData).void }
        def initialize(id:, event:, created_at:, data:)
          @id = id
          @event = event
          @created_at = created_at
          @data = data
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @event == other.event
          return false unless @created_at == other.created_at
          return false unless @data == other.data
          true
        end
      end
    end
  end
end
