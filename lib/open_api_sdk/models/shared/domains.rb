# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class Domains
        extend T::Sig
        include Crystalline::MetadataFields

        # The domain name.
        field :slug, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('slug'), required: true } }
        # Whether the domain is the primary domain for the workspace.
        field :primary, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('primary') } }
        # Whether the domain is verified.
        field :verified, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('verified') } }

        sig { params(slug: ::String, primary: T.nilable(T::Boolean), verified: T.nilable(T::Boolean)).void }
        def initialize(slug:, primary: false, verified: false)
          @slug = slug
          @primary = primary
          @verified = verified
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @slug == other.slug
          return false unless @primary == other.primary
          return false unless @verified == other.verified
          true
        end
      end
    end
  end
end
