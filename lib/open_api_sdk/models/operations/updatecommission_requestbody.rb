# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    

      class UpdateCommissionRequestBody
        extend T::Sig
        include Crystalline::MetadataFields

        # The new absolute amount for the sale. Paid commissions cannot be updated.
        field :amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('amount') } }
        # Modify the current sale amount: use positive values to increase the amount, negative values to decrease it. Takes precedence over `amount`. Paid commissions cannot be updated.
        field :modify_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('modifyAmount') } }
        # Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
        field :status, Crystalline::Nilable.new(Models::Operations::Status), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Operations::Status, true) } }
        # The currency of the sale amount to update. Accepts ISO 4217 currency codes.
        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency') } }

        sig { params(amount: T.nilable(::Float), modify_amount: T.nilable(::Float), status: T.nilable(Models::Operations::Status), currency: T.nilable(::String)).void }
        def initialize(amount: nil, modify_amount: nil, status: nil, currency: 'usd')
          @amount = amount
          @modify_amount = modify_amount
          @status = status
          @currency = currency
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @modify_amount == other.modify_amount
          return false unless @status == other.status
          return false unless @currency == other.currency
          true
        end
      end
    end
  end
end
