# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  

    class UpdateCommissionRequestBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # The new absolute amount for the sale. Paid commissions cannot be updated.
      field :amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('amount') } }
      # The currency of the sale amount to update. Accepts ISO 4217 currency codes.
      field :currency, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency') } }
      # Modify the current sale amount: use positive values to increase the amount, negative values to decrease it. Takes precedence over `amount`. Paid commissions cannot be updated.
      field :modify_amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('modifyAmount') } }
      # Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
      field :status, T.nilable(::OpenApiSDK::Operations::Status), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::Status, true) } }


      sig { params(amount: T.nilable(::Float), currency: T.nilable(::String), modify_amount: T.nilable(::Float), status: T.nilable(::OpenApiSDK::Operations::Status)).void }
      def initialize(amount: nil, currency: nil, modify_amount: nil, status: nil)
        @amount = amount
        @currency = currency
        @modify_amount = modify_amount
        @status = status
      end
    end
  end
end
