# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    
      # A sale was tracked.
      class TrackSaleResponseBody
        extend T::Sig
        include Crystalline::MetadataFields


        field :event_name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('eventName'), required: true } }

        field :customer, Crystalline::Nilable.new(Models::Operations::TrackSaleCustomer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer'), required: true } }

        field :sale, Crystalline::Nilable.new(Models::Operations::Sale), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sale'), required: true } }

        sig { params(event_name: ::String, customer: T.nilable(Models::Operations::TrackSaleCustomer), sale: T.nilable(Models::Operations::Sale)).void }
        def initialize(event_name:, customer: nil, sale: nil)
          @event_name = event_name
          @customer = customer
          @sale = sale
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @event_name == other.event_name
          return false unless @customer == other.customer
          return false unless @sale == other.sale
          true
        end
      end
    end
  end
end
