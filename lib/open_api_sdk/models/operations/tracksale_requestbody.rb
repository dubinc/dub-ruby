# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    

      class TrackSaleRequestBody
        extend T::Sig
        include Crystalline::MetadataFields

        # The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
        field :customer_external_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customerExternalId'), required: true } }
        # The amount of the sale in cents (for all two-decimal currencies). If the sale is in a zero-decimal currency, pass the full integer value (e.g. `1437` JPY). Learn more: https://d.to/currency
        field :amount, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('amount'), required: true } }
        # The currency of the sale. Accepts ISO 4217 currency codes. Sales will be automatically converted and stored as USD at the latest exchange rates. Learn more: https://d.to/currency
        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency') } }
        # The name of the sale event. Recommended format: `Invoice paid` or `Subscription created`.
        field :event_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('eventName') } }
        # The payment processor via which the sale was made.
        field :payment_processor, Crystalline::Nilable.new(Models::Operations::PaymentProcessor), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('paymentProcessor'), 'decoder': Utils.enum_from_string(Models::Operations::PaymentProcessor, true) } }
        # Additional metadata to be stored with the sale event. Max 10,000 characters when stringified.
        field :metadata, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('metadata') } }
        # [For sale tracking without a pre-existing lead event]: The unique ID of the click that the sale conversion event is attributed to. You can read this value from `dub_id` cookie.
        field :click_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('clickId') } }
        # The invoice ID of the sale. Can be used as a idempotency key – only one sale event can be recorded for a given invoice ID.
        field :invoice_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('invoiceId') } }
        # The name of the lead event that occurred before the sale (case-sensitive). This is used to associate the sale event with a particular lead event (instead of the latest lead event for a link-customer combination, which is the default behavior). For sale tracking without a pre-existing lead event, this field can also be used to specify the lead event name.
        field :lead_event_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('leadEventName') } }
        # [For sale tracking without a pre-existing lead event]: The name of the customer. If not passed, a random name will be generated (e.g. “Big Red Caribou”).
        field :customer_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customerName') } }
        # [For sale tracking without a pre-existing lead event]: The email address of the customer.
        field :customer_email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customerEmail') } }
        # [For sale tracking without a pre-existing lead event]: The avatar URL of the customer.
        field :customer_avatar, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customerAvatar') } }

        sig { params(customer_external_id: ::String, amount: ::Integer, currency: T.nilable(::String), event_name: T.nilable(::String), payment_processor: T.nilable(Models::Operations::PaymentProcessor), metadata: T.nilable(T::Hash[Symbol, ::Object]), click_id: T.nilable(::String), invoice_id: T.nilable(::String), lead_event_name: T.nilable(::String), customer_name: T.nilable(::String), customer_email: T.nilable(::String), customer_avatar: T.nilable(::String)).void }
        def initialize(customer_external_id:, amount:, currency: 'usd', event_name: 'Purchase', payment_processor: Models::Operations::PaymentProcessor::CUSTOM, metadata: nil, click_id: nil, invoice_id: nil, lead_event_name: nil, customer_name: nil, customer_email: nil, customer_avatar: nil)
          @customer_external_id = customer_external_id
          @amount = amount
          @currency = currency
          @event_name = event_name
          @payment_processor = payment_processor
          @metadata = metadata
          @click_id = click_id
          @invoice_id = invoice_id
          @lead_event_name = lead_event_name
          @customer_name = customer_name
          @customer_email = customer_email
          @customer_avatar = customer_avatar
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @customer_external_id == other.customer_external_id
          return false unless @amount == other.amount
          return false unless @currency == other.currency
          return false unless @event_name == other.event_name
          return false unless @payment_processor == other.payment_processor
          return false unless @metadata == other.metadata
          return false unless @click_id == other.click_id
          return false unless @invoice_id == other.invoice_id
          return false unless @lead_event_name == other.lead_event_name
          return false unless @customer_name == other.customer_name
          return false unless @customer_email == other.customer_email
          return false unless @customer_avatar == other.customer_avatar
          true
        end
      end
    end
  end
end
