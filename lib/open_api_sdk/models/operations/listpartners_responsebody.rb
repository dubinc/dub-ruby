# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  

    class ListPartnersResponseBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # The total number of clicks on the partner's links. Defaults to 0 if `includeExpandedFields` is false.
      field :clicks, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('clicks') } }
      # The partner's country (required for tax purposes).
      field :country, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country') } }

      field :created_at, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('createdAt') } }
      # The partner's email address. Should be a unique value across Dub.
      field :email, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('email') } }
      # The partner's unique ID on Dub.
      field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }
      # The partner's avatar image.
      field :image, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('image') } }
      # The total number of leads generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
      field :leads, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('leads') } }
      # The partner's referral links in this program.
      field :links, T::Array[::OpenApiSDK::Operations::ListPartnersLink], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('links') } }
      # The partner's full legal name.
      field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }
      # The total net revenue generated by the partner. Defaults to 0 if `includeExpandedFields` is false.
      field :net_revenue, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('netRevenue') } }
      # The partner's unique ID on Dub.
      field :partner_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('partnerId') } }
      # The date when the partner enabled payouts.
      field :payouts_enabled_at, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('payoutsEnabledAt') } }
      # The partner's PayPal email (for receiving payouts via PayPal).
      field :paypal_email, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('paypalEmail') } }
      # The program's unique ID on Dub.
      field :program_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('programId') } }
      # The total amount of sales (in cents) generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
      field :sale_amount, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('saleAmount') } }
      # The total number of sales generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
      field :sales, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sales') } }
      # The status of the partner's enrollment in the program.
      field :status, ::OpenApiSDK::Operations::ListPartnersStatus, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::ListPartnersStatus, false) } }
      # The partner's Stripe Connect ID (for receiving payouts via Stripe).
      field :stripe_connect_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('stripeConnectId') } }
      # The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
      field :tenant_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tenantId') } }
      # The total commissions paid to the partner for their referrals. Defaults to 0 if `includeExpandedFields` is false.
      field :total_commissions, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('totalCommissions') } }
      # If the partner submitted an application to join the program, this is the ID of the application.
      field :application_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('applicationId') } }
      # If the partner was banned from the program, this is the date of the ban.
      field :banned_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bannedAt') } }
      # If the partner was banned from the program, this is the reason for the ban.
      field :banned_reason, T.nilable(::OpenApiSDK::Operations::ListPartnersBannedReason), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bannedReason'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::ListPartnersBannedReason, true) } }

      field :click_reward_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('clickRewardId') } }
      # A brief description of the partner and their background.
      field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }

      field :discount_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('discountId') } }
      # The partner's Instagram username (e.g. `johndoe`).
      field :instagram, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('instagram') } }

      field :instagram_verified_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('instagramVerifiedAt') } }

      field :lead_reward_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('leadRewardId') } }
      # The partner's LinkedIn username (e.g. `johndoe`).
      field :linkedin, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('linkedin') } }

      field :linkedin_verified_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('linkedinVerifiedAt') } }

      field :sale_reward_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('saleRewardId') } }
      # The partner's TikTok username (e.g. `johndoe`).
      field :tiktok, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tiktok') } }

      field :tiktok_verified_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tiktokVerifiedAt') } }
      # The partner's Twitter username (e.g. `johndoe`).
      field :twitter, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('twitter') } }

      field :twitter_verified_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('twitterVerifiedAt') } }
      # The partner's website URL (including the https protocol).
      field :website, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('website') } }

      field :website_txt_record, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('websiteTxtRecord') } }

      field :website_verified_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('websiteVerifiedAt') } }
      # The partner's YouTube channel username (e.g. `johndoe`).
      field :youtube, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtube') } }

      field :youtube_subscriber_count, T.nilable(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtubeSubscriberCount') } }

      field :youtube_verified_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtubeVerifiedAt') } }

      field :youtube_view_count, T.nilable(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtubeViewCount') } }


      sig { params(clicks: ::Float, country: ::String, created_at: ::String, email: ::String, id: ::String, image: ::String, leads: ::Float, links: T::Array[::OpenApiSDK::Operations::ListPartnersLink], name: ::String, net_revenue: ::Float, partner_id: ::String, payouts_enabled_at: ::String, paypal_email: ::String, program_id: ::String, sale_amount: ::Float, sales: ::Float, status: ::OpenApiSDK::Operations::ListPartnersStatus, stripe_connect_id: ::String, tenant_id: ::String, total_commissions: ::Float, application_id: T.nilable(::String), banned_at: T.nilable(::String), banned_reason: T.nilable(::OpenApiSDK::Operations::ListPartnersBannedReason), click_reward_id: T.nilable(::String), description: T.nilable(::String), discount_id: T.nilable(::String), instagram: T.nilable(::String), instagram_verified_at: T.nilable(::String), lead_reward_id: T.nilable(::String), linkedin: T.nilable(::String), linkedin_verified_at: T.nilable(::String), sale_reward_id: T.nilable(::String), tiktok: T.nilable(::String), tiktok_verified_at: T.nilable(::String), twitter: T.nilable(::String), twitter_verified_at: T.nilable(::String), website: T.nilable(::String), website_txt_record: T.nilable(::String), website_verified_at: T.nilable(::String), youtube: T.nilable(::String), youtube_subscriber_count: T.nilable(::Float), youtube_verified_at: T.nilable(::String), youtube_view_count: T.nilable(::Float)).void }
      def initialize(clicks: nil, country: nil, created_at: nil, email: nil, id: nil, image: nil, leads: nil, links: nil, name: nil, net_revenue: nil, partner_id: nil, payouts_enabled_at: nil, paypal_email: nil, program_id: nil, sale_amount: nil, sales: nil, status: nil, stripe_connect_id: nil, tenant_id: nil, total_commissions: nil, application_id: nil, banned_at: nil, banned_reason: nil, click_reward_id: nil, description: nil, discount_id: nil, instagram: nil, instagram_verified_at: nil, lead_reward_id: nil, linkedin: nil, linkedin_verified_at: nil, sale_reward_id: nil, tiktok: nil, tiktok_verified_at: nil, twitter: nil, twitter_verified_at: nil, website: nil, website_txt_record: nil, website_verified_at: nil, youtube: nil, youtube_subscriber_count: nil, youtube_verified_at: nil, youtube_view_count: nil)
        @clicks = clicks
        @country = country
        @created_at = created_at
        @email = email
        @id = id
        @image = image
        @leads = leads
        @links = links
        @name = name
        @net_revenue = net_revenue
        @partner_id = partner_id
        @payouts_enabled_at = payouts_enabled_at
        @paypal_email = paypal_email
        @program_id = program_id
        @sale_amount = sale_amount
        @sales = sales
        @status = status
        @stripe_connect_id = stripe_connect_id
        @tenant_id = tenant_id
        @total_commissions = total_commissions
        @application_id = application_id
        @banned_at = banned_at
        @banned_reason = banned_reason
        @click_reward_id = click_reward_id
        @description = description
        @discount_id = discount_id
        @instagram = instagram
        @instagram_verified_at = instagram_verified_at
        @lead_reward_id = lead_reward_id
        @linkedin = linkedin
        @linkedin_verified_at = linkedin_verified_at
        @sale_reward_id = sale_reward_id
        @tiktok = tiktok
        @tiktok_verified_at = tiktok_verified_at
        @twitter = twitter
        @twitter_verified_at = twitter_verified_at
        @website = website
        @website_txt_record = website_txt_record
        @website_verified_at = website_verified_at
        @youtube = youtube
        @youtube_subscriber_count = youtube_subscriber_count
        @youtube_verified_at = youtube_verified_at
        @youtube_view_count = youtube_view_count
      end
    end
  end
end
