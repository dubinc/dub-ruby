# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    
      # The created partner
      class CreatePartnerResponseBody
        extend T::Sig
        include Crystalline::MetadataFields

        # The partner's unique ID on Dub.
        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id'), required: true } }
        # The partner's full legal name.
        field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name'), required: true } }
        # The program's unique ID on Dub.
        field :program_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('programId'), required: true } }
        # The partner's unique ID on Dub.
        field :partner_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('partnerId'), required: true } }

        field :created_at, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('createdAt'), required: true } }
        # The status of the partner's enrollment in the program.
        field :status, Models::Operations::CreatePartnerStatus, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Operations::CreatePartnerStatus, false) } }
        # The partner's email address. Should be a unique value across Dub.
        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('email'), required: true } }
        # The partner's avatar image.
        field :image, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('image'), required: true } }
        # The partner's country (required for tax purposes).
        field :country, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country'), required: true } }
        # The partner's PayPal email (for receiving payouts via PayPal).
        field :paypal_email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('paypalEmail'), required: true } }
        # The partner's Stripe Connect ID (for receiving payouts via Stripe).
        field :stripe_connect_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('stripeConnectId'), required: true } }
        # The date when the partner enabled payouts.
        field :payouts_enabled_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('payoutsEnabledAt'), required: true } }
        # The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
        field :tenant_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tenantId'), required: true } }
        # The partner's referral links in this program.
        field :links, Crystalline::Nilable.new(Crystalline::Array.new(Models::Operations::CreatePartnerLink)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('links'), required: true } }
        # A brief description of the partner and their background.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }
        # The partner's group ID on Dub.
        field :group_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('groupId') } }
        # The total commissions paid to the partner for their referrals. Defaults to 0 if `includeExpandedFields` is false.
        field :total_commissions, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('totalCommissions') } }

        field :click_reward_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('clickRewardId') } }

        field :lead_reward_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('leadRewardId') } }

        field :sale_reward_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('saleRewardId') } }

        field :discount_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('discountId') } }
        # If the partner submitted an application to join the program, this is the ID of the application.
        field :application_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('applicationId') } }
        # If the partner was banned from the program, this is the date of the ban.
        field :banned_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bannedAt') } }
        # If the partner was banned from the program, this is the reason for the ban.
        field :banned_reason, Crystalline::Nilable.new(Models::Operations::BannedReason), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bannedReason'), 'decoder': Utils.enum_from_string(Models::Operations::BannedReason, true) } }
        # The total number of clicks on the partner's links. Defaults to 0 if `includeExpandedFields` is false.
        field :clicks, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('clicks') } }
        # The total number of leads generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
        field :leads, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('leads') } }
        # The total number of leads that converted to paying customers. Defaults to 0 if `includeExpandedFields` is false.
        field :conversions, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('conversions') } }
        # The total number of sales generated by the partner's links (includes recurring sales). Defaults to 0 if `includeExpandedFields` is false.
        field :sales, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sales') } }
        # The total amount of sales (in cents) generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
        field :sale_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('saleAmount') } }
        # The total net revenue generated by the partner. Defaults to 0 if `includeExpandedFields` is false.
        field :net_revenue, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('netRevenue') } }
        # The partner's website URL (including the https protocol).
        field :website, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('website') } }

        field :website_txt_record, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('websiteTxtRecord') } }

        field :website_verified_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('websiteVerifiedAt') } }
        # The partner's YouTube channel username (e.g. `johndoe`).
        field :youtube, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtube') } }

        field :youtube_verified_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtubeVerifiedAt') } }

        field :youtube_subscriber_count, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtubeSubscriberCount') } }

        field :youtube_view_count, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('youtubeViewCount') } }
        # The partner's Twitter username (e.g. `johndoe`).
        field :twitter, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('twitter') } }

        field :twitter_verified_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('twitterVerifiedAt') } }
        # The partner's LinkedIn username (e.g. `johndoe`).
        field :linkedin, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('linkedin') } }

        field :linkedin_verified_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('linkedinVerifiedAt') } }
        # The partner's Instagram username (e.g. `johndoe`).
        field :instagram, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('instagram') } }

        field :instagram_verified_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('instagramVerifiedAt') } }
        # The partner's TikTok username (e.g. `johndoe`).
        field :tiktok, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tiktok') } }

        field :tiktok_verified_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tiktokVerifiedAt') } }

        sig { params(id: ::String, name: ::String, program_id: ::String, partner_id: ::String, created_at: ::String, status: Models::Operations::CreatePartnerStatus, email: T.nilable(::String), image: T.nilable(::String), country: T.nilable(::String), paypal_email: T.nilable(::String), stripe_connect_id: T.nilable(::String), payouts_enabled_at: T.nilable(::String), tenant_id: T.nilable(::String), links: T.nilable(T::Array[Models::Operations::CreatePartnerLink]), description: T.nilable(::String), group_id: T.nilable(::String), total_commissions: T.nilable(::Float), click_reward_id: T.nilable(::String), lead_reward_id: T.nilable(::String), sale_reward_id: T.nilable(::String), discount_id: T.nilable(::String), application_id: T.nilable(::String), banned_at: T.nilable(::String), banned_reason: T.nilable(Models::Operations::BannedReason), clicks: T.nilable(::Float), leads: T.nilable(::Float), conversions: T.nilable(::Float), sales: T.nilable(::Float), sale_amount: T.nilable(::Float), net_revenue: T.nilable(::Float), website: T.nilable(::String), website_txt_record: T.nilable(::String), website_verified_at: T.nilable(::String), youtube: T.nilable(::String), youtube_verified_at: T.nilable(::String), youtube_subscriber_count: T.nilable(::Float), youtube_view_count: T.nilable(::Float), twitter: T.nilable(::String), twitter_verified_at: T.nilable(::String), linkedin: T.nilable(::String), linkedin_verified_at: T.nilable(::String), instagram: T.nilable(::String), instagram_verified_at: T.nilable(::String), tiktok: T.nilable(::String), tiktok_verified_at: T.nilable(::String)).void }
        def initialize(id:, name:, program_id:, partner_id:, created_at:, status:, email: nil, image: nil, country: nil, paypal_email: nil, stripe_connect_id: nil, payouts_enabled_at: nil, tenant_id: nil, links: nil, description: nil, group_id: nil, total_commissions: 0.0, click_reward_id: nil, lead_reward_id: nil, sale_reward_id: nil, discount_id: nil, application_id: nil, banned_at: nil, banned_reason: nil, clicks: 0.0, leads: 0.0, conversions: 0.0, sales: 0.0, sale_amount: 0.0, net_revenue: 0.0, website: nil, website_txt_record: nil, website_verified_at: nil, youtube: nil, youtube_verified_at: nil, youtube_subscriber_count: nil, youtube_view_count: nil, twitter: nil, twitter_verified_at: nil, linkedin: nil, linkedin_verified_at: nil, instagram: nil, instagram_verified_at: nil, tiktok: nil, tiktok_verified_at: nil)
          @id = id
          @name = name
          @program_id = program_id
          @partner_id = partner_id
          @created_at = created_at
          @status = status
          @email = email
          @image = image
          @country = country
          @paypal_email = paypal_email
          @stripe_connect_id = stripe_connect_id
          @payouts_enabled_at = payouts_enabled_at
          @tenant_id = tenant_id
          @links = links
          @description = description
          @group_id = group_id
          @total_commissions = total_commissions
          @click_reward_id = click_reward_id
          @lead_reward_id = lead_reward_id
          @sale_reward_id = sale_reward_id
          @discount_id = discount_id
          @application_id = application_id
          @banned_at = banned_at
          @banned_reason = banned_reason
          @clicks = clicks
          @leads = leads
          @conversions = conversions
          @sales = sales
          @sale_amount = sale_amount
          @net_revenue = net_revenue
          @website = website
          @website_txt_record = website_txt_record
          @website_verified_at = website_verified_at
          @youtube = youtube
          @youtube_verified_at = youtube_verified_at
          @youtube_subscriber_count = youtube_subscriber_count
          @youtube_view_count = youtube_view_count
          @twitter = twitter
          @twitter_verified_at = twitter_verified_at
          @linkedin = linkedin
          @linkedin_verified_at = linkedin_verified_at
          @instagram = instagram
          @instagram_verified_at = instagram_verified_at
          @tiktok = tiktok
          @tiktok_verified_at = tiktok_verified_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @program_id == other.program_id
          return false unless @partner_id == other.partner_id
          return false unless @created_at == other.created_at
          return false unless @status == other.status
          return false unless @email == other.email
          return false unless @image == other.image
          return false unless @country == other.country
          return false unless @paypal_email == other.paypal_email
          return false unless @stripe_connect_id == other.stripe_connect_id
          return false unless @payouts_enabled_at == other.payouts_enabled_at
          return false unless @tenant_id == other.tenant_id
          return false unless @links == other.links
          return false unless @description == other.description
          return false unless @group_id == other.group_id
          return false unless @total_commissions == other.total_commissions
          return false unless @click_reward_id == other.click_reward_id
          return false unless @lead_reward_id == other.lead_reward_id
          return false unless @sale_reward_id == other.sale_reward_id
          return false unless @discount_id == other.discount_id
          return false unless @application_id == other.application_id
          return false unless @banned_at == other.banned_at
          return false unless @banned_reason == other.banned_reason
          return false unless @clicks == other.clicks
          return false unless @leads == other.leads
          return false unless @conversions == other.conversions
          return false unless @sales == other.sales
          return false unless @sale_amount == other.sale_amount
          return false unless @net_revenue == other.net_revenue
          return false unless @website == other.website
          return false unless @website_txt_record == other.website_txt_record
          return false unless @website_verified_at == other.website_verified_at
          return false unless @youtube == other.youtube
          return false unless @youtube_verified_at == other.youtube_verified_at
          return false unless @youtube_subscriber_count == other.youtube_subscriber_count
          return false unless @youtube_view_count == other.youtube_view_count
          return false unless @twitter == other.twitter
          return false unless @twitter_verified_at == other.twitter_verified_at
          return false unless @linkedin == other.linkedin
          return false unless @linkedin_verified_at == other.linkedin_verified_at
          return false unless @instagram == other.instagram
          return false unless @instagram_verified_at == other.instagram_verified_at
          return false unless @tiktok == other.tiktok
          return false unless @tiktok_verified_at == other.tiktok_verified_at
          true
        end
      end
    end
  end
end
