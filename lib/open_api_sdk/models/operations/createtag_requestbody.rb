# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    

      class CreateTagRequestBody
        extend T::Sig
        include Crystalline::MetadataFields

        # The name of the tag to create.
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }
        # The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, brown.
        field :color, Crystalline::Nilable.new(Models::Operations::Color), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('color'), 'decoder': Utils.enum_from_string(Models::Operations::Color, true) } }
        # The name of the tag to create.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :tag, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tag') } }

        sig { params(name: T.nilable(::String), color: T.nilable(Models::Operations::Color), tag: T.nilable(::String)).void }
        def initialize(name: nil, color: nil, tag: nil)
          @name = name
          @color = color
          @tag = tag
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @color == other.color
          return false unless @tag == other.tag
          true
        end
      end
    end
  end
end
