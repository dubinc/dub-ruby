# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Operations
    

      class CheckDomainStatusResponseBody
        extend T::Sig
        include Crystalline::MetadataFields

        # The domain name.
        field :domain, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('domain'), required: true } }
        # Whether the domain is available.
        field :available, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('available'), required: true } }
        # The price description.
        field :price, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('price'), required: true } }
        # Whether the domain is a premium domain.
        field :premium, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('premium'), required: true } }

        sig { params(domain: ::String, available: T::Boolean, price: T.nilable(::String), premium: T.nilable(T::Boolean)).void }
        def initialize(domain:, available:, price: nil, premium: nil)
          @domain = domain
          @available = available
          @price = price
          @premium = premium
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @domain == other.domain
          return false unless @available == other.available
          return false unless @price == other.price
          return false unless @premium == other.premium
          true
        end
      end
    end
  end
end
